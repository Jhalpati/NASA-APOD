{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","photos","axios","get","then","res","console","log","setState","data","this","className","media_type","src","url","alt","title","frameBorder","gesture","allow","allowFullScreen","date","explanation","href","target","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+RAiEeA,G,kNAxDbC,MAAQ,CACNC,OAAS,I,kEAGU,IAAD,OAClBC,IACGC,IACC,wFAEDC,MAAK,SAACC,GACLC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZP,OAAQI,EAAII,Y,+BAKV,IACAR,EAAWS,KAAKV,MAAhBC,OAER,OACE,yBAAKU,UAAU,OACb,yBAAKA,UAAU,cACb,mEAGuB,UAAtBV,EAAOW,WACV,yBACEC,IAAKZ,EAAOa,IACZC,IAAKd,EAAOe,MACZL,UAAU,UAGZ,4BACEK,MAAM,cACNH,IAAKZ,EAAOa,IACZG,YAAY,IACZC,QAAQ,QACRC,MAAM,kBACNC,iBAAe,EACfT,UAAU,WAIZ,wBAAIA,UAAU,QAAQV,EAAOoB,MAC7B,4BAAKpB,EAAOe,OACZ,uBAAGL,UAAU,SAASV,EAAOqB,aAE7B,6CAAkB,uBAAGC,KAAK,4BAA4BC,OAAO,UAA3C,2B,GAjDRC,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.01deb7f4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport ReactDOM from \"react-dom\";\n// import Image from \"react-bootstrap/Image\";\nimport \"./App.css\";\n\n// const classes = useStyles();\n\nclass App extends Component {\n  state = {\n    photos : [],\n  };\n\n  componentDidMount() {\n    axios\n      .get(\n        \"https://api.nasa.gov/planetary/apod?api_key=badlynwl0NVQ6og2yffuO1lghbwqS9vxFO13UF9l\"\n      )\n      .then((res) => {\n        console.log(res);\n        this.setState({\n          photos: res.data,\n        });\n      });\n  }\n\n  render() {\n    const { photos } = this.state;\n\n    return (\n      <div className=\"app\">\n        <div className=\"nasa-photo\">\n          <h1>NASA's Astronomy Picture of the day</h1>\n          \n          {/* <img src={photos.url} className=\"photo\"/> */}\n          {photos.media_type === \"image\" ? (\n        <img\n          src={photos.url}\n          alt={photos.title}\n          className=\"photo\"\n        />\n      ) : (\n        <iframe\n          title=\"space-video\"\n          src={photos.url}\n          frameBorder=\"0\"\n          gesture=\"media\"\n          allow=\"encrypted-media\"\n          allowFullScreen\n          className=\"photo\"\n        />\n      )}\n        </div>\n        <h1 className=\"date\">{photos.date}</h1>\n        <h1>{photos.title}</h1>\n        <p className=\"title\">{photos.explanation}</p>\n\n        <footer>Created by<a href=\"https://www.jayhalpati.me\" target=\"_blank\"> Jaykumar Halpati</a></footer>\n\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}